/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        // zero the x input? and/or negate the x input?
        Mux16(a = x, b = false, sel = zx, out = zeroX);
        Not16(in = zeroX, out = notzeroX); 
        Mux16(a = zeroX, b = notzeroX, sel = nx, out = X);

        // zero the y input? and/or negate the y input?
        Mux16(a = y, b = false, sel = zy, out = zeroY);
        Not16(in = zeroY, out = notzeroY);
        Mux16(a = zeroY, b = notzeroY, sel = ny, out = Y);

        // compute (out = x + y) or (out = x & y)?
        Add16(a = X, b = Y, out = XaddY);
        And16(a = X, b = Y, out = XandY);
        Mux16(a = XandY, b = XaddY, sel = f, out = fres);

        // negate the out output?
        Not16(in = fres, out = notfres);
        Mux16(a = fres, b = notfres, sel = no, out = out, out[0..7] = HalfOut1, out[8..15] = HalfOut2, out[15] = MSB);

        // if (out == 0) zr equals 1, else 0
        Or8Way(in = HalfOut1, out = HalfOutOr1);
        Or8Way(in = HalfOut2, out = HalfOutOr2);
        Or(a = HalfOutOr1, b = HalfOutOr2, out = Or16Way);
        Mux(a = true, b = false, sel = Or16Way, out = zr);

        // if (out < 0) ng equals 1, else 0
        Mux(a = false, b = true, sel = MSB, out = ng);
}